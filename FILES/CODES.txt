  
  show eny eroors 
  @if ($errors->any())
        <div class="alert alert-danger">
            <ul>
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    @if (session('status'))
        <div class="alert alert-{{ session('status')['type'] }}">
            {{ session('status')['message'] }}
        </div>
    @endif



--- CLASESS 
                    <span class="ti-xs ti ti-file-download me-1"></span>
-  class="btn btn-label-primary waves-effect" header >> 

-

<!-- Check if variable is set -->
@isset($user)
    <p>{{ $user->name }}</p>
@endisset

 -- send request using fetch
     fetch('{{ route('distributions.addCitizens') }}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': '{{ csrf_token() }}'
        },
        body: JSON.stringify({
            citizens: [citizenId].join(','),
            distributionId: distributionId
        })
    })
    .then(response => response.json())
    .then(data => {
      
        hideModal();
    })
    .catch(error => {

        hideModal();
    });


send form and data using ajax
$('#applyFilter').on('click', function () {
    var formData = $('#advancedFilterForm').serialize();
    
    $.ajax({
        type: 'POST',
        url: '/your-endpoint',
        data: formData,
        success: function (response) {
            // Handle success
        },
        error: function (response) {
            // Handle error
        }
    });
});

use service in contrller
protected $reportService;

    public function __construct(DistributionReportService $reportService)
    {
        $this->reportService = $reportService;
    }

// testing 
    php artisan make:test CitizenTest

    //code to remove many ids 
    if (empty($citizenIds)){
        Log::alert('no citizens found');
        return false;
       }
       try{
        Citizen::whereIn('id', $citizenIds)->delete();
        return true;
       }catch(Exception $e){
        Log::eroor('faild to remove: '.$e->getMessage());
        return false;
       }
    
    // code to update many ids region \
    Citizen::whereIn('id', $citizenIds)->update(['region_id' => $regionId]);
    code to do it but using transaction
       /**
     * Change region for selected citizens.
     *
     * @param array $citizenIds
     * @param int $regionId
     * @return bool
     */
    public function changeRegion(array $citizenIds, int $regionId): bool
    {
        try {
            DB::transaction(function () use ($citizenIds, $regionId) {
                // Update region for the selected citizens.
                Citizen::whereIn('id', $citizenIds)->update(['region_id' => $regionId]);
            });

            return true;
        } catch (Exception $e) {
            Log::error('Failed to change citizen region: ' . $e->getMessage());
            return false;
        }
    }


/// 
validate pinout 
  $validator = Validator::make($request->all(), [
        'city' => 'required|in:City1,City2,City3,City4,City5', // Replace with your actual city names
        // Add other validation rules as needed
    ]);

    if ($validator->fails()) {
        return redirect()->back()->withErrors($validator)->withInput();
    }


    //// use request costom
    
public function store(CitizenRequest $request)
{
    // The incoming request is valid...

    // Create a new citizen record
    Citizen::create($request->validated());

    return redirect()->route('citizens.index')->with('success', 'Citizen created successfully.');
}

