  
  show eny eroors 
  @if ($errors->any())
        <div class="alert alert-danger">
            <ul>
                @foreach ($errors->all() as $error)
                    <li>{{ $error }}</li>
                @endforeach
            </ul>
        </div>
    @endif

    @if (session('status'))
        <div class="alert alert-{{ session('status')['type'] }}">
            {{ session('status')['message'] }}
        </div>
    @endif



--- CLASESS 
                    <span class="ti-xs ti ti-file-download me-1"></span>
-  class="btn btn-label-primary waves-effect" header >> 

-

<!-- Check if variable is set -->
@isset($user)
    <p>{{ $user->name }}</p>
@endisset

 -- send request using fetch
     fetch('{{ route('distributions.addCitizens') }}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRF-TOKEN': '{{ csrf_token() }}'
        },
        body: JSON.stringify({
            citizens: [citizenId].join(','),
            distributionId: distributionId
        })
    })
    .then(response => response.json())
    .then(data => {
      
        hideModal();
    })
    .catch(error => {

        hideModal();
    });


send form and data using ajax
$('#applyFilter').on('click', function () {
    var formData = $('#advancedFilterForm').serialize();
    
    $.ajax({
        type: 'POST',
        url: '/your-endpoint',
        data: formData,
        success: function (response) {
            // Handle success
        },
        error: function (response) {
            // Handle error
        }
    });
});

use service in contrller
protected $reportService;

    public function __construct(DistributionReportService $reportService)
    {
        $this->reportService = $reportService;
    }

// testing 
    php artisan make:test CitizenTest

    //code to remove many ids 
    if (empty($citizenIds)){
        Log::alert('no citizens found');
        return false;
       }
       try{
        Citizen::whereIn('id', $citizenIds)->delete();
        return true;
       }catch(Exception $e){
        Log::eroor('faild to remove: '.$e->getMessage());
        return false;
       }
    
    // code to update many ids region \
    Citizen::whereIn('id', $citizenIds)->update(['region_id' => $regionId]);
    code to do it but using transaction
       /**
     * Change region for selected citizens.
     *
     * @param array $citizenIds
     * @param int $regionId
     * @return bool
     */
    public function changeRegion(array $citizenIds, int $regionId): bool
    {
        try {
            DB::transaction(function () use ($citizenIds, $regionId) {
                // Update region for the selected citizens.
                Citizen::whereIn('id', $citizenIds)->update(['region_id' => $regionId]);
            });

            return true;
        } catch (Exception $e) {
            Log::error('Failed to change citizen region: ' . $e->getMessage());
            return false;
        }
    }


/// 
validate pinout 
  $validator = Validator::make($request->all(), [
        'city' => 'required|in:City1,City2,City3,City4,City5', // Replace with your actual city names
        // Add other validation rules as needed
    ]);

    if ($validator->fails()) {
        return redirect()->back()->withErrors($validator)->withInput();
    }


    //// use request costom
    
public function store(CitizenRequest $request)
{
    // The incoming request is valid...

    // Create a new citizen record
    Citizen::create($request->validated());

    return redirect()->route('citizens.index')->with('success', 'Citizen created successfully.');
}




To restrict the citizens shown in the `index` method of your `CitizenController` so that only the citizens from the region manager’s assigned region(s) are displayed, you can modify the method as follows:

### 1. **Check for User's Role and Assigned Regions**:
If the authenticated user is a region manager, filter the citizens based on the regions assigned to that user. Otherwise, show all citizens for users with other roles (e.g., admins).

### Updated `index` Method:

```php
public function index(Request $request)
{
    $user = auth()->user();

    // Initialize the citizens query
    $query = Citizen::query();

    if ($user->hasRole('region_manager')) {
        // Get the region manager's assigned regions
        $regionIds = $user->regions()->pluck('region_id')->toArray();

        // Restrict the citizens to those belonging to the manager's regions
        $query->whereIn('region_id', $regionIds);
    }

    // Apply any filters (search, pagination, etc.)
    if ($request->has('search')) {
        $search = $request->input('search');
        $query->where(function ($q) use ($search) {
            $q->where('firstname', 'like', "%{$search}%")
                ->orWhere('lastname', 'like', "%{$search}%")
                ->orWhere('id', 'like', "%{$search}%");
        });
    }

    // You can paginate or fetch the data as needed
    $citizens = $query->paginate(25); // Or use ->get() if no pagination is needed

    return view('citizens.index', compact('citizens'));
}
```

### Explanation:
1. **Role Check**: The method checks if the authenticated user has the `region_manager` role using `$user->hasRole('region_manager')`.
2. **Region Filtering**: If the user is a region manager, it filters the citizens by the regions that the manager has access to, which are retrieved from the relationship (`$user->regions()`).
3. **Search Filtering**: If the request contains a search parameter, it applies a search filter to the citizens' first name, last name, or ID.
4. **Pagination**: The method paginates the results (you can adjust the number of results per page).

### 2. **User Regions Relationship**:
Ensure the `User` model has a relationship that connects it to the `Region` model. For example, if a manager can be assigned to multiple regions:

In `User` Model:

```php
public function regions()
{
    return $this->belongsToMany(Region::class, 'user_regions', 'user_id', 'region_id');
}
```

This relationship assumes there is a `user_regions` pivot table that links users to regions. If your table is different, adjust the parameters accordingly.

### 3. **View Handling**:
In your `citizens.index` view, you will display the citizens as usual, but now the list will be restricted based on the authenticated user’s regions.

Example:

```blade
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Region</th>
            <!-- Other columns -->
        </tr>
    </thead>
    <tbody>
        @foreach($citizens as $citizen)
        <tr>
            <td>{{ $citizen->id }}</td>
            <td>{{ $citizen->firstname }} {{ $citizen->lastname }}</td>
            <td>{{ $citizen->region->name }}</td>
            <!-- Other columns -->
        </tr>
        @endforeach
    </tbody>
</table>

{{ $citizens->links() }} <!-- For pagination links -->
```

By modifying the `index` method like this, you ensure that the region manager only sees citizens from their assigned regions while keeping the rest of the functionality intact for other roles.






To implement the restriction so that a region manager can view only the citizens of their assigned region within a distribution, follow these steps:

### 1. **Modify Distribution Access for Region Managers**:
When showing citizens of a distribution, the region manager should only see the citizens that belong to their region(s).

### 2. **Modify the `showDistribution` Method**:
Update the method that fetches citizens in a distribution so it filters by both the distribution and the region(s) assigned to the region manager.

In `DistributionController`, modify the method responsible for showing distribution citizens:

```php
public function showDistribution($distributionId)
{
    $user = auth()->user();

    if ($user->hasRole('region_manager')) {
        // Fetch citizens in the manager's assigned regions and in the specified distribution
        $citizens = Citizen::whereIn('region_id', $user->regions()->pluck('region_id')->toArray())
            ->whereHas('distributions', function ($query) use ($distributionId) {
                $query->where('distribution_id', $distributionId);
            })->get();
    } else {
        // For other roles, fetch all citizens in the distribution
        $citizens = Citizen::whereHas('distributions', function ($query) use ($distributionId) {
            $query->where('distribution_id', $distributionId);
        })->get();
    }

    return view('distributions.show', compact('citizens'));
}
```

### 3. **Region-Specific Filtering in View**:
In your view (`distributions.show`), display the filtered list of citizens for the region manager.

For example:

```blade
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>Region</th>
            <th>Distribution Info</th>
        </tr>
    </thead>
    <tbody>
        @foreach($citizens as $citizen)
        <tr>
            <td>{{ $citizen->id }}</td>
            <td>{{ $citizen->firstname }} {{ $citizen->lastname }}</td>
            <td>{{ $citizen->region->name }}</td>
            <td>{{ $citizen->distributions->where('id', $distributionId)->first()->pivot->quantity }}</td>
        </tr>
        @endforeach
    </tbody>
</table>
```

### 4. **Restricting Access for Unauthorized Managers**:
Ensure that only the citizens from the manager’s region are accessible by applying the same logic in any action (e.g., editing) that deals with citizens within a distribution.

In `CitizenController` (for editing citizens in a distribution):

```php
public function editCitizenInDistribution(Request $request, $citizenId, $distributionId)
{
    $user = auth()->user();
    $citizen = Citizen::findOrFail($citizenId);

    // Check if the citizen is in one of the regions managed by the region manager
    if ($user->hasRole('region_manager') && !$user->regions()->where('region_id', $citizen->region_id)->exists()) {
        return redirect()->route('unauthorized')->with('error', 'You do not have permission to edit this citizen.');
    }

    // Proceed with updating the citizen
    $citizen->update($request->all());

    return redirect()->back()->with('success', 'Citizen data updated.');
}
```

### 5. **Ensure Proper Role-Based Authorization**:
Make sure your application enforces role-based access control using policies or middleware. Region managers should only be able to view and edit citizens within their assigned regions, and this logic must be consistently applied.

By implementing these changes, the region manager will only be able to see citizens in their assigned regions when viewing a distribution.